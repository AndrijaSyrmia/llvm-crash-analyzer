## Test that Machine Function is being decompiled for fn out of bt.

## int * global_a;
##
##void func1(){
##  global_a = 0x0; // blame
##}
##
##void func2(){
##  *global_a = 20; // crash here
##}
##
##void caller1(){
## func1(); // func1 not in bt
##  func2();
##}
##
##int main(){
##   caller1();
##}

# RUN: %crash-blamer --print-decompiled-mir=%t.mir \
# RUN:     --core-file=%S/Inputs/core.callee-out-of-bt %S/Inputs/callee-out-of-bt
# RUN: cat %t.mir | FileCheck %s

# CHECK: name: func1
# CHECK: bb.0:
# CHECK: PUSH64r $rbp, implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 3, scope: !{{.*}})
# CHECK: $rbp = MOV64rr $rsp, debug-location !DILocation(line: 3, scope: !{{.*}})
# CHECK: MOV64mi32 $noreg, 1, $noreg, 4210736, $noreg, 0, debug-location !DILocation(line: 4, column: 12, scope: !{{.*}})
# CHECK: $rbp = POP64r implicit-def $rsp, implicit $rsp, debug-location !DILocation(line: 5, column: 1, scope: !{{.*}})
# CHECK: crash-start RETQ debug-location !DILocation(line: 5, column: 1, scope: !{{.*}})
